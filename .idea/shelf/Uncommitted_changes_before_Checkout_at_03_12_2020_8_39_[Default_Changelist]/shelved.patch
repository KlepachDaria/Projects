Index: les_4/lesson4.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># ВАЖНО!\r\n# В работе все импортируемые библиотеки должны быть в самом верху документа,\r\n# но для наглядности я добавляла их по мере выполнения заданий,\r\n# поэтому программа выдает предупреждение \"E402 module level import not at top of file\"\r\n\r\n# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.\r\n# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.\r\n# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.\r\nprint(\"Task 1\")\r\n\r\nimport task_1\r\n\r\nemployer_1 = task_1.payroll(40, 700, 10000)\r\nprint(\"Заработная плата сотрудника\", employer_1, \"рублей\")\r\n\r\n# 2. Представлен список чисел. Необходимо вывести элементы исходного списка,\r\n# значения которых больше предыдущего элемента.\r\n# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.\r\n# Для формирования списка использовать генератор.\r\n# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].\r\n# Результат: [12, 44, 4, 10, 78, 123].\r\n\r\nprint(\"\\nTask 2\")\r\n\r\nlist_2 = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]\r\ntask_2 = [el for i, el in enumerate(list_2) if i > 0 and list_2[i] > list_2[i - 1]]\r\nprint(task_2)\r\n\r\n# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.\r\n# Подсказка: использовать функцию range() и генератор.\r\nprint(\"\\nTask 3\")\r\n\r\ntask_3 = [el for el in range(20, 240) if el % 20 == 0 or el % 21 == 0]\r\nprint(task_3)\r\n\r\n# 4. Представлен список чисел. Определить элементы списка,\r\n# не имеющие повторений. Сформировать итоговый массив чисел,\r\n# соответствующих требованию. Элементы вывести в порядке их следования в исходном списке.\r\n# Для выполнения задания обязательно использовать генератор.\r\n# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].\r\n# Результат: [23, 1, 3, 10, 4, 11]\r\nprint(\"\\nTask 4\")\r\nfrom collections import Counter\r\n\r\nlist_4 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]\r\n\r\n#c = Counter(list_4)\r\n#task_4 = [i for i in list_4 if c[i] == 1]\r\ntask_4 = [i for i in list_4 if list_4.count(i) == 1]\r\nprint(task_4)\r\n\r\n# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.\r\n# В список должны войти четные числа от 100 до 1000 (включая границы).\r\n# Необходимо получить результат вычисления произведения всех элементов списка.\r\n# Подсказка: использовать функцию reduce().\r\nprint(\"\\nTask 5\")\r\nfrom functools import reduce\r\n\r\nlist_5 = [el for el in range(100, 1001) if el % 2 == 0]\r\ntask_5 = reduce(lambda x, y: x * y, list_5)\r\nprint(task_5)\r\n\r\n# 6. Реализовать два небольших скрипта:\r\n# а) итератор, генерирующий целые числа, начиная с указанного,\r\n# б) итератор, повторяющий элементы некоторого списка, определенного заранее.\r\n# Подсказка: использовать функцию count() и cycle() модуля itertools.\r\n#\r\n# Обратите внимание, что создаваемый цикл не должен быть бесконечным.\r\n# Необходимо предусмотреть условие его завершения.\r\n# Например, в первом задании выводим целые числа, начиная с 3,\r\n# а при достижении числа 10 завершаем цикл. Во втором также необходимо предусмотреть условие,\r\n# при котором повторение элементов списка будет прекращено.\r\nprint(\"\\nTask 6, a)\")\r\nfrom itertools import count\r\nfrom itertools import cycle\r\n\r\n\r\ndef generator_nums(start, end):\r\n    for i in count(start):\r\n        if i > end:\r\n            break\r\n        else:\r\n            print(i)\r\n\r\n\r\ngenerator_nums(3, 10)\r\n\r\nprint(\"\\nTask 6, b)\")\r\n\r\n\r\ndef generator_list(list, end):\r\n    count = 0\r\n    for i in cycle(list):\r\n        if count >= end:\r\n            break\r\n        print(i)\r\n        count += 1\r\n\r\n\r\nlist_6 = [1, 2, 3]\r\ngenerator_list(list_6, 5)\r\n\r\n# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.\r\n# При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом:\r\n# for el in fact(n). Функция отвечает за получение факториала числа,\r\n# а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.\r\n# Подсказка: факториал числа n — произведение чисел от 1 до n.\r\n# Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.\r\nprint(\"\\nTask 7\")\r\n\r\n\r\ndef fact(n):\r\n    val = 1\r\n    for i in range(1, n + 1):\r\n        val *= i\r\n        yield i\r\n    yield val\r\n\r\n\r\nnum = int(input(\"Введите число для получения факториала: \"))\r\nfor el in fact(num):\r\n    print(el)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- les_4/lesson4.py	(revision 26d0465d1201297ed69a64ab945442beb0064284)
+++ les_4/lesson4.py	(date 1606966745035)
@@ -74,7 +74,7 @@
 from itertools import count
 from itertools import cycle
 
-
+# решение
 def generator_nums(start, end):
     for i in count(start):
         if i > end:
