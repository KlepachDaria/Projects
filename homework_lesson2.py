# Task 1
# Создать список и заполнить его элементами различных типов данных.
# Реализовать скрипт проверки типа данных каждого элемента.
# Использовать функцию type() для проверки типа.
# Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

new_list = ['hhjj', 677, None]
for el in new_list:
    print(type(el))

# Task 2
# Для списка реализовать обмен значений соседних элементов,
# т.е. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д.
# При нечетном количестве элементов последний сохранить на своем месте.
# Для заполнения списка элементов необходимо использовать функцию input().
#
# P.S. Задание выполнено после просмотра Урока 3, т.к. самостоятельно не разобралась.

my_list = list(input('Enter text '))

for i in range(1, len(my_list), 2):
    my_list[i - 1], my_list[i] = my_list[i], my_list[i - 1]
print(my_list)

# Task 3
# Пользователь вводит месяц в виде целого числа от 1 до 12.
# Сообщить к какому времени года относится месяц (зима, весна, лето, осень).
# Напишите решения через list и через dict.

# task 3/1 -  list
month = int(input())
list_of_month = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
check = list_of_month.index(month)
if check == 0 or check == 1 or check == 11:
    print('winter')
elif check == 2 or check == 3 or check == 4:
    print('spring')
elif check == 5 or check == 6 or check == 7:
    print('summer')
elif check == 8 or check == 9 or check == 10:
    print('autumn')
# task 3/2 - dict
month = int(input())
dict_of_months = {1: 'winter', 2: 'winter',
                  3: 'spring', 4: 'spring', 5: 'spring',
                  6: 'summer', 7: 'summer', 8: 'summer',
                  9: 'autumn', 10: 'autumn', 11: 'autumn',
                  12: 'winter'}
check = dict_of_months.get(month)
print(check)

# Task 4
# Пользователь вводит строку из нескольких слов, разделённых пробелами.
# Вывести каждое слово с новой строки. Строки необходимо пронумеровать.
# Если в слово длинное, выводить только первые 10 букв в слове.

new_str = input()
new_str = new_str.split()
el = 0
for el in new_str:
    if 10 >= len(el):
        print(el)
    else:
        print(el[0:10])

# Task 5
# Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
# У пользователя необходимо запрашивать новый элемент рейтинга.
# Если в рейтинге существуют элементы с одинаковыми значениями,
# то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.

my_list = [7, 5, 3, 3, 2]
new_el = input('Введите новый элемент рейтинга: ')
for i, n in enumerate(my_list):
    if int(new_el) < int(n):
        continue
    my_list.insert(i, new_el)
    break
else:
    my_list.append(new_el)
print(my_list)

# Task 6
# Реализовать структуру данных «Товары».
# Она должна представлять собой список кортежей.
# Каждый кортеж хранит информацию об отдельном товаре.
# В кортеже должно быть два элемента — номер товара и словарь с параметрами
# (характеристиками товара: название, цена, количество, единица измерения).
# Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя. Пример готовой структуры:
# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]

goods = []
features = {'название': '', 'цена': '', 'количество': '', 'ед.': ''}
analytics = {'название': [], 'цена': [], 'количество': [], 'ед.': []}
num = 0

while True:
    if input('Выход - Q, \nЛюбая клавиша - продолжить: ').upper() == 'Q':
        break
    num += 1
    for f in features.keys():
        user_data = input(f'{f}: ')
        features[f] = int(user_data) if (f == 'цена' or f == 'количество') else user_data
        analytics[f].append(features[f])
    goods.append((num, features.copy()))
    print('Текущая аналитика:\n')
    for key, value in analytics.items():
        print(key, value)
print(goods)
