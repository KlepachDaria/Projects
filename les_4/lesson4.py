# ВАЖНО!
# В работе все импортируемые библиотеки должны быть в самом верху документа,
# но для наглядности я добавляла их по мере выполнения заданий,
# поэтому программа выдает предупреждение "E402 module level import not at top of file"

# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
print("Task 1")

import task_1

employer_1 = task_1.payroll(40, 700, 10000)
print("Заработная плата сотрудника", employer_1, "рублей")

# 2. Представлен список чисел. Необходимо вывести элементы исходного списка,
# значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

print("\nTask 2")

list_2 = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
task_2 = [el for i, el in enumerate(list_2) if i > 0 and list_2[i] > list_2[i - 1]]
print(task_2)

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.
print("\nTask 3")

task_3 = [el for el in range(20, 240) if el % 20 == 0 or el % 21 == 0]
print(task_3)

# 4. Представлен список чисел. Определить элементы списка,
# не имеющие повторений. Сформировать итоговый массив чисел,
# соответствующих требованию. Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]
print("\nTask 4")
from collections import Counter

list_4 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]

c = Counter(list_4)
task_4 = [i for i in list_4 if c[i] == 1]
print(task_4)

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().
print("\nTask 5")
from functools import reduce

list_5 = [el for el in range(100, 1001) if el % 2 == 0]
task_5 = reduce(lambda x, y: x * y, list_5)
print(task_5)

# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools.
#
# Обратите внимание, что создаваемый цикл не должен быть бесконечным.
# Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3,
# а при достижении числа 10 завершаем цикл. Во втором также необходимо предусмотреть условие,
# при котором повторение элементов списка будет прекращено.
print("\nTask 6, a)")
from itertools import count
from itertools import cycle

# решение мое
def generator_nums(start, end):
    for i in count(start):
        if i > end:
            break
        else:
            print(i)

generator_nums(3, 10)

# разбор здания на занятии

for i in count(int(input("ведите стартовое число: "))):
    print(i)
    if i == 10:
        break

print("\nTask 6, b)")

# мое решение

def generator_list(list, end):
    count = 0
    for i in cycle(list):
        if count >= end:
            break
        print(i)
        count += 1


list_6 = [1, 2, 3]
generator_list(list_6, 5)

# разбор решения на занятии
iter = cycle(list_6)
stop = ''

while stop != 'q':
    print(next(iter), end = '')
    stop = input("\nНажмите q, чтобы закончить.")
# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом:
# for el in fact(n). Функция отвечает за получение факториала числа,
# а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n.
# Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
print("\nTask 7")

# мое решение
def fact(n):
    val = 1
    for i in range(1, n + 1):
        val *= i
        yield i
    yield val


num = int(input("Введите число для получения факториала: "))
for el in fact(num):
    print(el)

# разбор на занятии
from math import factorial
from itertools import count

def fibo_gen():
    for el in count(1):
        yield factorial(el)


x = 1
for i in fibo_gen():
    print('Factorial {} - {}'.format(x,i))
    if x == 15:
        break
    x += 1